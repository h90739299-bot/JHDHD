-- Simple Mobile Fly Script for Roblox
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local Character = player.Character or player.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local RootPart = Character:WaitForChild("HumanoidRootPart")

-- Create simple GUI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "SimpleFlyMenu"
ScreenGui.Parent = game:GetService("CoreGui")

local MainFrame = Instance.new("Frame")
MainFrame.Size = UDim2.new(0.25, 0, 0.15, 0)
MainFrame.Position = UDim2.new(0.02, 0, 0.02, 0)
MainFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
MainFrame.BorderSizePixel = 2
MainFrame.BorderColor3 = Color3.fromRGB(100, 100, 100)
MainFrame.Parent = ScreenGui

-- Variables
local FlyToggled = false
local FlySpeed = 25
local BodyGyro = nil
local BodyVelocity = nil

-- Check if we're on mobile
local IsMobile = UserInputService.TouchEnabled

-- Mobile control variables
local mobileUp = false
local mobileDown = false

-- Create button function
local function CreateButton(text, yPosition, callback, width, xPosition)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(width or 0.9, 0, 0.4, 0)
    button.Position = UDim2.new(xPosition or 0.05, 0, yPosition, 0)
    button.Text = text
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
    button.BorderSizePixel = 0
    button.TextSize = 12
    button.Parent = MainFrame
    
    button.MouseButton1Click:Connect(function()
        pcall(callback)
    end)
    return button
end

-- Fly Button
local flyButton = CreateButton("FLY: OFF", 0.05, function()
    FlyToggled = not FlyToggled
    
    if FlyToggled then
        -- Remove old physics objects if they exist
        if BodyGyro then pcall(function() BodyGyro:Destroy() end) end
        if BodyVelocity then pcall(function() BodyVelocity:Destroy() end) end
        
        BodyGyro = Instance.new("BodyGyro")
        BodyGyro.P = 10000
        BodyGyro.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
        BodyGyro.CFrame = RootPart.CFrame
        BodyGyro.Parent = RootPart

        BodyVelocity = Instance.new("BodyVelocity")
        BodyVelocity.Velocity = Vector3.new(0, 0, 0)
        BodyVelocity.MaxForce = Vector3.new(9e9, 9e9, 9e9)
        BodyVelocity.Parent = RootPart
        
        flyButton.Text = "FLY: ON"
        flyButton.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
    else
        if BodyGyro then pcall(function() BodyGyro:Destroy() end) end
        if BodyVelocity then pcall(function() BodyVelocity:Destroy() end) end
        flyButton.Text = "FLY: OFF"
        flyButton.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
    end
end, 0.4)

-- Speed Control Button
local speedButton = CreateButton("SPEED: " .. FlySpeed, 0.05, function()
    FlySpeed = FlySpeed + 5
    if FlySpeed > 50 then
        FlySpeed = 10
    end
    speedButton.Text = "SPEED: " .. FlySpeed
end, 0.4, 0.5)

-- Create mobile flight controls
if IsMobile then
    local touchGui = Instance.new("ScreenGui")
    touchGui.Name = "MobileFlightControls"
    touchGui.Parent = game:GetService("CoreGui")
    
    -- Up button
    local upButton = Instance.new("TextButton")
    upButton.Size = UDim2.new(0.1, 0, 0.1, 0)
    upButton.Position = UDim2.new(0.8, 0, 0.7, 0)
    upButton.Text = "↑"
    upButton.TextSize = 20
    upButton.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
    upButton.BorderSizePixel = 2
    upButton.BorderColor3 = Color3.fromRGB(255, 255, 255)
    upButton.Parent = touchGui
    
    -- Down button
    local downButton = Instance.new("TextButton")
    downButton.Size = UDim2.new(0.1, 0, 0.1, 0)
    downButton.Position = UDim2.new(0.8, 0, 0.85, 0)
    downButton.Text = "↓"
    downButton.TextSize = 20
    downButton.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
    downButton.BorderSizePixel = 2
    downButton.BorderColor3 = Color3.fromRGB(255, 255, 255)
    downButton.Parent = touchGui
    
    -- Button events
    upButton.MouseButton1Down:Connect(function() mobileUp = true end)
    upButton.MouseButton1Up:Connect(function() mobileUp = false end)
    
    downButton.MouseButton1Down:Connect(function() mobileDown = true end)
    downButton.MouseButton1Up:Connect(function() mobileDown = false end)
end

-- Flight control function
local function HandleFlight()
    pcall(function()
        -- Handle flight
        if FlyToggled and RootPart and RootPart.Parent then
            -- Ensure physics objects exist
            if not BodyGyro or not BodyVelocity or not BodyGyro.Parent or not BodyVelocity.Parent then
                if BodyGyro then pcall(function() BodyGyro:Destroy() end) end
                if BodyVelocity then pcall(function() BodyVelocity:Destroy() end) end
                
                BodyGyro = Instance.new("BodyGyro")
                BodyGyro.P = 10000
                BodyGyro.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
                BodyGyro.CFrame = RootPart.CFrame
                BodyGyro.Parent = RootPart

                BodyVelocity = Instance.new("BodyVelocity")
                BodyVelocity.Velocity = Vector3.new(0, 0, 0)
                BodyVelocity.MaxForce = Vector3.new(9e9, 9e9, 9e9)
                BodyVelocity.Parent = RootPart
            end
            
            -- Flight controls
            if BodyGyro and BodyVelocity then
                local camera = Workspace.CurrentCamera
                if camera then
                    BodyGyro.CFrame = camera.CFrame
                    
                    local moveDirection = Vector3.new(0, 0, 0)
                    
                    -- Keyboard controls
                    if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                        moveDirection = moveDirection + (camera.CFrame.LookVector * FlySpeed)
                    end
                    
                    if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                        moveDirection = moveDirection - (camera.CFrame.LookVector * FlySpeed)
                    end
                    
                    if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                        moveDirection = moveDirection + (camera.CFrame.RightVector * FlySpeed)
                    end
                    
                    if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                        moveDirection = moveDirection - (camera.CFrame.RightVector * FlySpeed)
                    end
                    
                    -- Vertical controls
                    if UserInputService:IsKeyDown(Enum.KeyCode.Space) or mobileUp then
                        moveDirection = moveDirection + Vector3.new(0, FlySpeed, 0)
                    end
                    
                    if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) or mobileDown then
                        moveDirection = moveDirection - Vector3.new(0, FlySpeed, 0)
                    end
                    
                    BodyVelocity.Velocity = moveDirection
                end
            end
        end
    end)
end

-- Character respawn handling
player.CharacterAdded:Connect(function(newCharacter)
    pcall(function()
        Character = newCharacter
        Humanoid = newCharacter:WaitForChild("Humanoid")
        RootPart = newCharacter:WaitForChild("HumanoidRootPart")
        
        -- Re-enable flight if it was active
        if FlyToggled then
            FlyToggled = false
            flyButton.Text = "FLY: OFF"
            flyButton.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
            
            if BodyGyro then pcall(function() BodyGyro:Destroy() end) end
            if BodyVelocity then pcall(function() BodyVelocity:Destroy() end) end
        end
    end)
end)

-- Connect flight handler to heartbeat
RunService.Heartbeat:Connect(HandleFlight)

print("✅ Simple Fly System loaded successfully!")
